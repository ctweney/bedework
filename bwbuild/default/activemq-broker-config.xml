<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!-- Bedework:
  For the quickstart this file is copied out of the current configuration/build
  directory into the activemq configuration directory.

  DO NOT edit the copy of this file inside activemq. If you want to change the
  configuration edit a copy inside your bedework configuration directory.
 -->

<!-- START SNIPPET: example -->
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
  http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">

    <!-- Allows us to use system properties as variables in this configuration file
-->
  <bean
    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
  <!--
    <property name="locations">
      <value>file:///${activemq.base}/conf/credentials.properties
      </value>
    </property>
  -->
  </bean>

  <broker xmlns="http://activemq.apache.org/schema/core"
          brokerName="bedework" useJmx="true" useShutdownHook="false" >
    <!--
      MikeD Queues for various bedework services. These are all fed by
      the virtual queue bedework.sysevents
    -->
    <destinations>
      <!-- The listener just logs the system events -->
      <queue name="logger"
             physicalName="bedework.sysevents.logger" />

      <!-- The listener monitors system activity -->
      <queue name="monitor"
             physicalName="bedework.sysevents.monitor" />

      <!-- The listener is the crawler which (re)indexes the system -->
      <queue name="crawler"
             physicalName="bedework.crawler" />

      <!--
        The listener is the scheduler which handles events appearing in
        the in/outbox
      -->
      <queue name="schedulerIn"
             physicalName="bedework.scheduleIn" />
      <queue name="schedulerOut"
             physicalName="bedework.scheduleOut" />

      <!-- <topic physicalName="SOME.TOPIC" /> -->
    </destinations>

    <!-- MikeD -->
    <destinationInterceptors>
      <virtualDestinationInterceptor>
        <virtualDestinations>
          <compositeQueue name="bedework.sysevents">
            <forwardTo>
              <queue physicalName="bedework.sysevents.logger" />
              <queue physicalName="bedework.sysevents.monitor" />
              <queue physicalName="bedework.crawler" />
              <filteredDestination selector="inbox = 'true' or scheduleEvent = 'true'"
                                   queue="bedework.scheduleIn"/>
              <filteredDestination selector="outbox = 'true'"
                                   queue="bedework.scheduleOut"/>
            </forwardTo>
          </compositeQueue>
        </virtualDestinations>
      </virtualDestinationInterceptor>
    </destinationInterceptors>

    <!--
      Destination specific policies using destination names or wildcards
    -->
    <destinationPolicy>
      <policyMap>
        <policyEntries>
          <policyEntry queue=">" memoryLimit="5mb" />
          <policyEntry topic=">" memoryLimit="5mb">
            <!--
              you can add other policies too such as these
              <dispatchPolicy> <strictOrderDispatchPolicy/>
              </dispatchPolicy> <subscriptionRecoveryPolicy>
              <lastImageSubscriptionRecoveryPolicy/>
              </subscriptionRecoveryPolicy>
            -->
          </policyEntry>
        </policyEntries>
      </policyMap>
    </destinationPolicy>

    <!--
      MikeD - there are some reports of messages not getting delivered,
      possibly because consumers aren't going fast enough for activemq and
      it tries to slow down the producers. The following disables that
      behavior

      <destinationPolicy>
        <policyMap>
          <policyEntries>
            <policyEntry queue=">" producerFlowControl="false"
              memoryLimit="64mb" />
          </policyEntries>
        </policyMap>
      </destinationPolicy>
      -->

    <!-- This allows the activemq domain to appear in the jboss jmx-console -->
    <managementContext>
      <managementContext>
          <MBeanServer>
              <bean class="org.jboss.mx.util.MBeanServerLocator" 
                    factory-method="locateJBoss" xmlns=""/>
          </MBeanServer>
      </managementContext> 
    </managementContext>

    <!-- The store and forward broker networks ActiveMQ will listen to -->
    <networkConnectors>
      <!-- by default just auto discover the other brokers
         Configured out for the time being - causes a lot of error messages
      <networkConnector name="default-nc" uri="multicast://default" />
       -->
      <!--
        Example of a static configuration: <networkConnector name="host1
        and host2" uri="static://(tcp://host1:61616,tcp://host2:61616)"/>
      -->
    </networkConnectors>

    <!-- High throughput but scalability problems - perhaps OK with <=500 connections 
    <persistenceAdapter>
      <amqPersistenceAdapter syncOnWrite="false"
        directory="${jboss.server.data.dir}/activemq-data" maxFileLength="20 mb" />
    </persistenceAdapter> -->

    <!-- Newer adapter - handles 1000s of connections -->
    <persistenceAdapter>
      <kahaPersistenceAdapter directory="${jboss.server.data.dir}/activemq" maxDataFileLength="33554432"/>
    </persistenceAdapter>

    <!-- older and slower is jdbcPersistenceAdapter -->

    <!--
    <sslContext>
      <sslContext keyStore="file:${activemq.base}/conf/broker.ks"
                  keyStorePassword="password"
                  trustStore="file:${activemq.base}/conf/broker.ts"
                  trustStorePassword="password" />
    </sslContext>
    -->

    <!--
      The maximum amount of space the broker will use before slowing down
      producers
    -->
    <systemUsage>
      <systemUsage>
        <memoryUsage>
          <memoryUsage limit="20 mb" />
        </memoryUsage>
        <storeUsage>
          <storeUsage limit="1 gb" name="foo" />
        </storeUsage>
        <tempUsage>
          <tempUsage limit="100 mb" />
        </tempUsage>
      </systemUsage>
    </systemUsage>


    <!-- The transport connectors ActiveMQ will listen to -->
    <transportConnectors>
      <transportConnector name="bedework" 
                          uri="${org.bedework.activemq.uri}" />
      <!--
      <transportConnector name="bedework" uri="tcp://localhost:61616" />
        According to the book we shouldn't specify a discoveryUri - can lead to
        multiple activemq brokers eating each others messages, At the very least
        it leads to exceptions when I close the lid of my laptop.
      <transportConnector name="bedework" uri="tcp://localhost:61616" discoveryUri="multicast://default"/>
      <transportConnector name="xmpp" uri="xmpp://localhost:61222"/>
      -->
    </transportConnectors>

  </broker>

  <!--
  ** Lets dseploy some Enterprise Integration Patterns inside the ActiveMQ Message Broker
  ** For more details see
  **
  ** http://activemq.apache.org/enterprise-integration-patterns.html

  <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">

    < ! - - You can use a <package> element for each root package to search for
         Java routes - - >
    <package>org.foo.bar</package>

    < ! - - You can use Spring XML syntax to define the routes here using the <route> element - - >
    <route>
      <from uri="activemq:example.A"/>
      <to uri="activemq:example.B"/>
    </route>
  </camelContext>
  -->

  <!--
  ** Lets configure some Camel endpoints
  **
  ** http://activemq.apache.org/camel/components.html
  -->

  <!-- configure the camel activemq component to use the current broker
  <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent" >
    <property name="connectionFactory">
      <bean class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="vm://localhost?create=false&amp;waitForStart=10000" />
        <property name="userName" value="${activemq.username}"/>
        <property name="password" value="${activemq.password}"/>
      </bean>
    </property>
  </bean>
-->

  <!-- Uncomment to create a command agent to respond to message based admin commands on the ActiveMQ.Agent topic
-->
  <!--
  <commandAgent xmlns="http://activemq.apache.org/schema/core"
                brokerUrl="vm://localhost"
                username="${activemq.username}"
                password="${activemq.password}"/>
  -->

  <!-- An embedded servlet engine for serving up the Admin console
  <jetty xmlns="http://mortbay.com/schemas/jetty/1.0">
    <connectors>
      <nioConnector port="8161"/>
    </connectors>

    <handlers>
      <webAppContext contextPath="/admin" resourceBase="${activemq.base}/webapps/admin" logUrlOnStart="true"/>
      <webAppContext contextPath="/demo" resourceBase="${activemq.base}/webapps/demo" logUrlOnStart="true"/>
      <webAppContext contextPath="/fileserver" resourceBase="${activemq.base}/webapps/fileserver" logUrlOnStart="true"/>
    </handlers>
  </jetty>
 -->
  <!--  This xbean configuration file supports all the standard spring xml configuration options
-->


</beans>

